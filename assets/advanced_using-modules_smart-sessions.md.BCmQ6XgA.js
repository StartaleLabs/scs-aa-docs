import{_ as t,c as a,o,ae as s}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"ERC-7579 Smart Session Module","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/using-modules/smart-sessions.md","filePath":"advanced/using-modules/smart-sessions.md"}'),i={name:"advanced/using-modules/smart-sessions.md"};function r(n,e,l,d,u,h){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="erc-7579-smart-session-module" tabindex="-1">ERC-7579 Smart Session Module <a class="header-anchor" href="#erc-7579-smart-session-module" aria-label="Permalink to &quot;ERC-7579 Smart Session Module&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>An <strong>ERC-7579 Smart Session Module</strong> is a plug-in component used in <strong>modular smart accounts</strong> (like those defined in <a href="https://eips.ethereum.org/EIPS/eip-4337" target="_blank" rel="noreferrer">ERC-4337</a>) to grant <strong>temporary, limited access</strong> to a smart account.</p><p>Smart Sessions are especially useful when:</p><ul><li>You want to allow a third party (like a dApp or another wallet) to execute actions on your behalf.</li><li>You want to interact with a dApp from a mobile device or frontend <strong>without re-signing every transaction</strong>.</li><li>You need automation (bots, scheduled tasks) without exposing full control of your wallet.</li></ul><p>The session module enables <strong>delegated control</strong> under pre-defined rules, for a <strong>limited time</strong>, optionally <strong>scoped to certain actions or destinations</strong>.</p><hr><h2 id="what-is-a-smart-session" tabindex="-1">What is a Smart Session? <a class="header-anchor" href="#what-is-a-smart-session" aria-label="Permalink to &quot;What is a Smart Session?&quot;">​</a></h2><p>Think of a Smart Session like a temporary API key for your smart account. It&#39;s a signed, time-limited permission slip that lets a delegate (usually another signer or application) execute certain actions on your behalf <strong>without re-authentication</strong>.</p><p>It uses cryptographic signatures to prove:</p><ul><li>The session was authorized by the account owner.</li><li>The scope (what operations are allowed).</li><li>The duration (how long the session is valid).</li></ul><hr><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><h3 id="_1-session-initialization" tabindex="-1">1. <strong>Session Initialization</strong> <a class="header-anchor" href="#_1-session-initialization" aria-label="Permalink to &quot;1. **Session Initialization**&quot;">​</a></h3><p>The account owner creates a session by signing a data structure defining:</p><ul><li>Delegate address (who can act).</li><li>Validity window (start time and expiry).</li><li>Permission scope (call targets, function selectors, value limits, etc.).</li></ul><p>This is similar to a <strong>meta-transaction</strong>, but for <strong>sessions</strong>.</p><h3 id="_2-session-module-integration" tabindex="-1">2. <strong>Session Module Integration</strong> <a class="header-anchor" href="#_2-session-module-integration" aria-label="Permalink to &quot;2. **Session Module Integration**&quot;">​</a></h3><p>The smart account includes an ERC-7579-compliant <strong>session module</strong> that validates session signatures during execution. It implements logic to:</p><ul><li>Verify the session signature and structure.</li><li>Check expiration and other constraints.</li><li>Allow the delegate to perform authorized operations.</li></ul><h3 id="_3-session-execution" tabindex="-1">3. <strong>Session Execution</strong> <a class="header-anchor" href="#_3-session-execution" aria-label="Permalink to &quot;3. **Session Execution**&quot;">​</a></h3><p>The delegate uses the session signature to <strong>submit a UserOperation</strong> (or equivalent call) on behalf of the owner. The session module handles validation, ensuring it fits within the authorized constraints.</p><h3 id="_4-expiration-and-revocation" tabindex="-1">4. <strong>Expiration and Revocation</strong> <a class="header-anchor" href="#_4-expiration-and-revocation" aria-label="Permalink to &quot;4. **Expiration and Revocation**&quot;">​</a></h3><p>Sessions are:</p><ul><li><strong>Self-expiring</strong> based on timestamps.</li><li>Optionally revocable manually (depending on the module implementation).</li></ul><hr><h2 id="why-is-it-useful" tabindex="-1">Why Is It Useful? <a class="header-anchor" href="#why-is-it-useful" aria-label="Permalink to &quot;Why Is It Useful?&quot;">​</a></h2><p>Smart Sessions enhance usability and security by <strong>delegating control with granularity</strong>:</p><table tabindex="0"><thead><tr><th>Benefit</th><th>Description</th></tr></thead><tbody><tr><td>✅ UX Improvement</td><td>Users can approve a session once and interact freely (e.g., batch mint NFTs, play games, trade on DEXes).</td></tr><tr><td>✅ Delegated Automation</td><td>Allow bots or scripts to act on your behalf with bounded permissions.</td></tr><tr><td>✅ Frontend Wallets</td><td>Support session-based login and actions for dApps with mobile or embedded wallets.</td></tr><tr><td>✅ Multi-device Sync</td><td>Authorize a mobile or browser wallet to act as a secondary device without full access.</td></tr><tr><td>✅ Reduced Risk</td><td>Sessions are temporary and scoped, reducing attack surface compared to full key sharing.</td></tr></tbody></table><hr><h2 id="example-use-case" tabindex="-1">Example Use Case <a class="header-anchor" href="#example-use-case" aria-label="Permalink to &quot;Example Use Case&quot;">​</a></h2><p>Let&#39;s say Alice wants to play a web3 game that makes frequent moves on-chain. She doesn&#39;t want to sign every action manually.</p><ol><li><p>She authorizes a session for <code>GameFrontendWallet</code>:</p><ul><li>Valid for 2 hours</li><li>Only allowed to call the game contract</li><li>Max 0.01 ETH per move</li></ul></li><li><p>The <code>GameFrontendWallet</code> uses this session to send moves autonomously.</p></li><li><p>After 2 hours, the session expires. No further access is possible.</p></li></ol><hr><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://eips.ethereum.org/EIPS/eip-7579" target="_blank" rel="noreferrer">ERC-7579: Modular Smart Accounts</a></li><li><a href="https://www.zerodev.app/blog/kernel-account-abstraction/" target="_blank" rel="noreferrer">ZeroDev Kernel Architecture</a></li><li><a href="https://eips.ethereum.org/EIPS/eip-4337" target="_blank" rel="noreferrer">EIP-4337: Account Abstraction</a></li></ul>',36)]))}const m=t(i,[["render",r]]);export{p as __pageData,m as default};
