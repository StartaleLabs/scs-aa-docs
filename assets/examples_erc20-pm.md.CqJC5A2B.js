import{_ as a,c as e,o as i,ae as t}from"./chunks/framework.Dh1jimFm.js";const d=JSON.parse('{"title":"ðŸ’°Â ERC20 Token Paymaster Example","description":"","frontmatter":{},"headers":[],"relativePath":"examples/erc20-pm.md","filePath":"examples/erc20-pm.md"}'),n={name:"examples/erc20-pm.md"};function p(l,s,r,o,h,k){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="ðŸ’°-erc20-token-paymaster-example" tabindex="-1">ðŸ’°Â ERC20 Token Paymaster Example <a class="header-anchor" href="#ðŸ’°-erc20-token-paymaster-example" aria-label="Permalink to &quot;ðŸ’°Â ERC20 Token Paymaster Example&quot;">â€‹</a></h1><p>Ensure we have a token from supported token list. For simple you can bridge usdc coin :</p><p>Mint USDC on Ethereum Sepolia:</p><p><a href="https://t.co/gve4ultmwZ" target="_blank" rel="noreferrer">http://faucet.circle.com</a></p><p>Bridge it to Soneium Minato:</p><p><a href="https://t.co/TCOSdMNhcp" target="_blank" rel="noreferrer">https://soneium.org/en/bridges/</a></p><p>And then transfer it to your smart-account.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ðŸ’¡ Steps are similar to Sponsorship paymaster except in <strong>STEP 3</strong>, in paymasterContext, we use tokenAddress instead of policyId</p></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     paymasterContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       calculateGasLimits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       tokenAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0xE9A198d38483aD727ABC8b0B1e16B2d338CF0391&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//erc20 token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div>`,9)]))}const E=a(n,[["render",p]]);export{d as __pageData,E as default};
