import{_ as t,c as a,o as i,ae as o}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"UI Integration Demo","description":"","frontmatter":{},"headers":[],"relativePath":"examples/ui-demo.md","filePath":"examples/ui-demo.md"}'),s={name:"examples/ui-demo.md"};function n(l,e,r,d,c,u){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="ui-integration-demo" tabindex="-1">UI Integration Demo <a class="header-anchor" href="#ui-integration-demo" aria-label="Permalink to &quot;UI Integration Demo&quot;">​</a></h1><p>This demo showcases a decentralized dice-rolling game that utilizes smart accounts (ERC-7579) and session-based execution. By using social login provider (Privy), and session keys, users can create a smart contract wallet and roll dice without needing to sign every transaction, enhancing UX while maintaining security.</p><p>It also features optional social recovery module functionality.</p><p>Currently, the demo utilizes Bicomomy&#39;s Nexus smart contract wallet implementation with Rhinestone&#39;s 7579 modules.</p><p>Demo app: <a href="https://aa-demo.scs.startale.com/" target="_blank" rel="noreferrer">https://aa-demo.scs.startale.com/</a></p><p>Demo repo: <a href="https://github.com/StartaleLabs/scs-aa-demo-ui" target="_blank" rel="noreferrer">https://github.com/StartaleLabs/scs-aa-demo-ui</a></p><h2 id="how-to-use-the-demo" tabindex="-1">How to Use the Demo <a class="header-anchor" href="#how-to-use-the-demo" aria-label="Permalink to &quot;How to Use the Demo&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><ul><li><p>Either a web3 wallet (e.g., MetaMask) connected to the <a href="https://soneium-minato.blockscout.com/" target="_blank" rel="noreferrer"><strong>Soneium Minato</strong></a> test network, a Google account, or an email address to receive the sign-in code</p></li><li><p>The web3 wallet or social login is used to instantiate the smart contract wallet in this case. In a production environment, you might want to handle this by the service backend.</p></li><li><p>All operations are funded by a paymaster, so no funds are needed in the wallet</p></li></ul><h3 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;Steps&quot;">​</a></h3><ol><li><p><strong>Connect Your Wallet or log in</strong></p><ul><li>Open the application and connect your web3 wallet, Google or email account</li></ul></li><li><p><strong>Instantiate a Smart Account</strong></p><ul><li>An account is automatically instantiated, the address is displayed in the output area</li></ul></li><li><p><strong>(Optional) Add recovery keys</strong></p><ul><li>Input a guardian address, and click &quot;Add guardian&quot;.</li><li>On the first guardian add, the SocialRecovery module is installed first</li><li>You can add and remove more guardian addresses</li><li>A minimum of one address must be present after the module is installed</li></ul></li><li><p><strong>Start the game</strong></p><ul><li>Clicking the &quot;New game&quot; button will install the SmartSession module (only on first use), and create a session.</li><li>Session will be stored in local storage so the game can be played instantly on the next visit</li></ul></li><li><p><strong>Play the Dice Game</strong></p><ul><li>Once a session is active, roll the dice using the UI.</li><li>The result is written on-chain without additional signature prompts.</li><li>Your roll history and score are fetched directly from the smart contract.</li></ul></li></ol>',11)]))}const p=t(s,[["render",n]]);export{h as __pageData,p as default};
